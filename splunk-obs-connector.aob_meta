{"basic_builder": {"appname": "splunk-obs-connector", "friendly_name": "Splunk OBS Connector", "version": "1.0.0", "author": "mpb", "description": "Get log from huawei obs storage.", "theme": "#FFFFFF", "large_icon": "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", "small_icon": "iVBORw0KGgoAAAANSUhEUgAAACQAAAAkCAYAAADhAJiYAAAAAXNSR0IArs4c6QAAAyBJREFUWEftlj2IVFcUx39nnotyn4UWaqmJqVQIiujMG5CQIohaSCBCYoiFq4UW0UILKy1stNFiU0RThAQNioVgUiSQQph5i0oqTWX8KFUEFe81Mrtz5O3u252PN+/dN5uAxb5u5t7zP7/7P+d+CO/ZJ+8ZDwtARRVZcOh/c6jB4rVCcEWQTZ1JFP1LmdxT5+0/RcmzxocqWUyo3WJqp39L2Pl/DVtav1TATVgxQvg0SdpGD9dx32WtsoE5VEHGkrEWduU2eObrVimgaWe0XcMFPglizCRIpYxT3kBpmcqIJ9Bl47yAGrCyQvikTfvLOm9+8XEnnROzZC8EP7exq+owVe68LxcoJtwHehFkUSJS1p05qHQT6ATIaA374yCoTKAYcwLkdBqk6OMIt6ZodXnjTcwjQVbPaXIkwp7vjekDijEPQdYoejvCbfGBaLD4s4DKqypvxn3mNzH3BVkL+qiG+6AzpguoibkhyE5Bd1dx133Ek6ZtwccBEzYg+KOK+9AnroE5UEG+V/TXCLcrjZkFSs8YhaMR9pyPaALT21fjmAe+UE3CcwLfjmDDzeCmjtY08TjhC0XDGm7EE+Z5m4ktvVdEsrBFmN8j3EY/HdMSxFaxy7qAktUqOhrhfigSSua2mfho0H2V3HMVgks13NYirSZmvyAXU6dnHcqyP0vMd97MofhnDftpEVSn5hRQus2LzpmYMLNMgxLOvAjGItz2PKjp6nA8wp6dAmoSHhM4kwdUVKY8qArB1zXcqUFz+oBm7O3bMZ0C/U+OZFRPZiXqnatwPsIeyQPK7CHfpp4p80lF1kXYPb2Jmiz9IuL11aLeScbHMYcUGcsCeglq/Le9+U+AYkxLkdcRdnnXtr8DpkVoi+xNVx0zf6Dcg3G6uc01QT4XJr+p8u9P+TtjfkAxZhTkgsLlCPtV39XRcWLfVViv6L0It2FwIw4P1MTcFWS9wL0qtitH5vMjvfjmYPQW8Fs3nHyisELQjOaVdaB/9yxmB8js66GNHqzjLvQuuNQDzWfX5M8Z8oE2/8TDK3i9qYeXLx+5AFTk2YJDRQ69AzJZQzRn8z6WAAAAAElFTkSuQmCC", "visible": false, "tab_version": "4.1.0", "tab_build_no": "0", "build_no": 1}, "data_input_builder": {"datainputs": [{"index": "default", "sourcetype": "obs-input", "interval": "30", "use_external_validation": true, "streaming_mode_xml": true, "name": "obs_input", "title": "obs-input", "description": "", "type": "customized", "parameters": [{"required": true, "name": "endpoint", "label": "Endpoint", "default_value": "", "placeholder": "Endpoint of your bucket", "help_string": "", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "ak", "label": "AK", "default_value": "", "placeholder": "Your Access Key", "help_string": "Make sure you have the ListBucket permission and GetObject permission", "type": "text", "format_type": "text", "value": ""}, {"required": true, "name": "sk", "label": "SK", "placeholder": "Your Secret Access Key", "default_value": "", "help_string": "", "type": "password", "format_type": "password", "value": ""}, {"required": true, "name": "bucket", "label": "Bucket", "default_value": "", "placeholder": "Your bucket", "help_string": "", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "prefix", "label": "Prefix", "default_value": "", "placeholder": "", "help_string": "The prefix of the target object, after specifying this value, only objects starting with this prefix will be listed", "type": "text", "format_type": "text", "value": ""}, {"required": false, "name": "part_size", "label": "Part Size", "default_value": "4194304", "placeholder": "", "help_string": "The block size when getting the object, the unit is bytes, the default value is 4M", "type": "text", "format_type": "text", "value": "4194304"}, {"required": false, "name": "retry_times", "label": "Retry Times", "default_value": "3", "placeholder": "", "help_string": "Number of retries when getting object content fails", "type": "text", "format_type": "text", "value": "3"}, {"required": false, "name": "using_https", "label": "Using HTTPS", "default_value": true, "help_string": "Whether to use HTTPS", "type": "checkbox", "format_type": "checkbox", "value": true}, {"required": false, "name": "unpack_gz_file", "label": "Unpack GZ File", "default_value": true, "help_string": "Whether to automatically decompress files ending in `.gz`, when set to False, the content of `.gz` files will not be recognized", "type": "checkbox", "format_type": "checkbox", "value": true}, {"required": false, "name": "enable_obs_log", "label": "Enable OBS Log", "default_value": false, "help_string": "Whether to enable the log of OBS SDK. If this option is enabled, the path to the log configuration file must be specified.", "type": "checkbox", "format_type": "checkbox", "value": false}, {"required": false, "name": "log_config_path", "label": "Log Config Path", "default_value": "", "help_string": "The path of the log configuration file, you can get the template from https://github.com/huaweicloud/huaweicloud-sdk-python-obs/blob/master/log.conf", "type": "text", "format_type": "text", "placeholder": "/root/log.conf", "value": ""}], "data_inputs_options": [{"type": "customized_var", "name": "endpoint", "title": "Endpoint", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "Endpoint of your bucket"}, {"type": "customized_var", "name": "ak", "title": "AK", "description": "Make sure you have the ListBucket permission and GetObject permission", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "Your Access Key"}, {"type": "customized_var", "name": "sk", "title": "SK", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "password", "default_value": "", "placeholder": "Your Secret Access Key"}, {"type": "customized_var", "name": "bucket", "title": "Bucket", "description": "", "required_on_edit": false, "required_on_create": true, "format_type": "text", "default_value": "", "placeholder": "Your bucket"}, {"type": "customized_var", "name": "prefix", "title": "Prefix", "description": "The prefix of the target object, after specifying this value, only objects starting with this prefix will be listed", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": ""}, {"type": "customized_var", "name": "part_size", "title": "Part Size", "description": "The block size when getting the object, the unit is bytes, the default value is 4M", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "4194304", "placeholder": ""}, {"type": "customized_var", "name": "retry_times", "title": "Retry Times", "description": "Number of retries when getting object content fails", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "3", "placeholder": ""}, {"type": "customized_var", "name": "using_https", "title": "Using HTTPS", "description": "Whether to use HTTPS", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}, {"type": "customized_var", "name": "unpack_gz_file", "title": "Unpack GZ File", "description": "Whether to automatically decompress files ending in `.gz`, when set to False, the content of `.gz` files will not be recognized", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": true}, {"type": "customized_var", "name": "enable_obs_log", "title": "Enable OBS Log", "description": "Whether to enable the log of OBS SDK. If this option is enabled, the path to the log configuration file must be specified.", "required_on_edit": false, "required_on_create": false, "format_type": "checkbox", "default_value": false}, {"type": "customized_var", "name": "log_config_path", "title": "Log Config Path", "description": "The path of the log configuration file, you can get the template from https://github.com/huaweicloud/huaweicloud-sdk-python-obs/blob/master/log.conf", "required_on_edit": false, "required_on_create": false, "format_type": "text", "default_value": "", "placeholder": "/root/log.conf"}], "code": "# encoding = utf-8\r\nimport gzip\r\nimport hashlib\r\nimport re\r\n\r\nfrom modinput_wrapper.base_modinput import BaseModInput\r\nfrom obs import ObsClient, GetObjectHeader, LogConf\r\nfrom splunklib.modularinput import EventWriter\r\n\r\n\r\ndef validate_input(helper, definition):\r\n    retry_times = definition.parameters.get('retry_times')\r\n    try:\r\n        int(retry_times)\r\n    except ValueError:\r\n        raise ValueError(f\"retry_times is wrong, {retry_times} is not a number! \")\r\n    part_size_str = definition.parameters.get('part_size', None)\r\n    try:\r\n        int(part_size_str)\r\n    except ValueError:\r\n        raise ValueError(f\"part_size_str is wrong, {part_size_str} is not a number! \")\r\n    enable_obs_log = definition.parameters.get('enable_obs_log', None)\r\n    log_config_path = definition.parameters.get('log_config_path', None)\r\n\r\n    if enable_obs_log is True:\r\n        endpoint = definition.parameters.get_arg('endpoint')\r\n        ak = definition.parameters.get_arg('ak')\r\n        sk = definition.parameters.get_arg('sk')\r\n        test_client = ObsClient(ak, sk, server=endpoint)\r\n        try:\r\n            test_client.initLog(LogConf(log_config_path), 'obs_logger')\r\n        except ValueError:\r\n            raise ValueError(f\"Some values in the settings file [{log_config_path}] are incorrect. Please check again.\")\r\n        except Exception as e:\r\n            raise e\r\n\r\n\r\ndef collect_events(helper, ew):\r\n    proxy_settings = helper.get_proxy()\r\n    loglevel = helper.get_log_level()\r\n    helper.set_log_level(loglevel)\r\n\r\n    endpoint = helper.get_arg('endpoint')\r\n    ak = helper.get_arg('ak')\r\n    sk = helper.get_arg('sk')\r\n    bucket = helper.get_arg('bucket')\r\n    prefix = helper.get_arg('prefix')\r\n    part_size = int(helper.get_arg('part_size'))\r\n    retry_times = int(helper.get_arg('retry_times'))\r\n    using_https = helper.get_arg('using_https')\r\n    unpack_gz_file = helper.get_arg('unpack_gz_file')\r\n\r\n    enable_obs_log = helper.get_arg('enable_obs_log')\r\n    log_config_path = helper.get_arg('log_config_path')\r\n\r\n    helper.log_info(f\"Initialization Parameters: endpoint:{endpoint}, ak:{ak}, bucket:{bucket}, prefix:{prefix}, \"\r\n                    f\"using_https:{using_https}, part_size: {part_size}, retry_times: {retry_times},\"\r\n                    f\"enable_log: {enable_obs_log}, log_config_path: {log_config_path}, \"\r\n                    f\"unpack_gz_file: {unpack_gz_file}\")\r\n    if \"proxy_url\" in proxy_settings:\r\n        helper.log_info(f\"Using Proxy, proxy info: proxy_host: {proxy_settings['proxy_host']}, \"\r\n                        f\"proxy_port: {proxy_settings['proxy_port']}, \"\r\n                        f\"proxy_username: {proxy_settings['proxy_username']}\")\r\n        obs_client = ObsClient(ak, sk, server=endpoint, is_secure=using_https,\r\n                               proxy_host=proxy_settings[\"proxy_url\"], proxy_port=int(proxy_settings[\"proxy_port\"]),\r\n                               proxy_username=proxy_settings[\"proxy_username\"],\r\n                               proxy_password=proxy_settings[\"proxy_password\"])\r\n    else:\r\n        obs_client = ObsClient(ak, sk, server=endpoint, is_secure=using_https)\r\n\r\n    if enable_obs_log:\r\n        obs_client.initLog(LogConf(log_config_path), 'obs_logger')\r\n    next_marker = None\r\n    page_number = 1\r\n    while True:\r\n        helper.log_info(f\"Listing page {page_number}\")\r\n        resp = obs_client.listObjects(bucket, marker=next_marker, prefix=prefix, encoding_type=\"url\")\r\n        helper.log_info(f\"List result: {resp}\")\r\n        for content in resp.body.contents:\r\n            object_key = content.key\r\n            md5 = hashlib.md5()\r\n            md5.update(f\"{bucket}/{object_key}\".encode(\"utf-8\"))\r\n            checkpoint_key = md5.hexdigest()\r\n            if helper.get_check_point(checkpoint_key) is not None:\r\n                helper.log_info(f\"{bucket}/{object_key} has been indexed before\")\r\n                continue\r\n            helper.log_info(f\"Start to get content of {bucket}/{object_key}\")\r\n            download_object_with_retry(obs_client, bucket, object_key, helper, ew,\r\n                                       part_size, retry_times, unpack_gz_file)\r\n            helper.save_check_point(checkpoint_key, \"Indexed\")\r\n\r\n        if not resp.body.is_truncated:\r\n            helper.log_info(f\"Finish listing, total page number is {page_number}\")\r\n            break\r\n        page_number += 1\r\n        next_marker = resp.body.next_marker\r\n\r\n\r\ndef download_object_with_retry(obs_client: ObsClient, bucket: str, object_key: str, helper: BaseModInput,\r\n                               ew: EventWriter, part_size: int = 4 * 1024 * 1024,\r\n                               retry_times: int = 3, unpack_gz_file=False):\r\n    start = 0\r\n    object_info = obs_client.headObject(bucket, object_key)\r\n    if object_info.status != 200:\r\n        helper.log_info(f\"Head object {object_key} failed\")\r\n        return False\r\n\r\n    content_length = int(dict(object_info.header)[\"content-length\"])\r\n    helper.log_info(f\"Total length of {object_key} is {content_length}, start to download object\")\r\n    part_end = min(content_length, start + part_size)\r\n    last_event = None\r\n    n = 0\r\n    while n < retry_times:\r\n        if start > content_length:\r\n            break\r\n        if last_event is not None:\r\n            ew.write_event(last_event)\r\n            last_event = None\r\n        try:\r\n            part_end = min(content_length, start + part_size)\r\n            helper.log_debug(f\"Getting {bucket}/{object_key} from {start} to {part_end}\")\r\n            header = GetObjectHeader(range=f\"{start}-{part_end}\")\r\n            part_content = obs_client.getObject(bucket, object_key, headers=header, loadStreamInMemory=True)\r\n            if unpack_gz_file and object_key.endswith(\".gz\"):\r\n                need_data = gzip.decompress(part_content.body.buffer)\r\n            else:\r\n                need_data = part_content.body.buffer\r\n            last_event = helper.new_event(data=need_data.decode(\"utf-8\"),\r\n                                          source=f\"{bucket}/{object_key}\", index=helper.get_output_index(),\r\n                                          sourcetype=helper.get_sourcetype(), done=False)\r\n\r\n            start = part_end + 1\r\n        except Exception as e:\r\n            helper.log_error(e)\r\n            helper.log_warning(f\"Getting object {object_key} from {start} to {part_end} failed, \"\r\n                               f\"retry for {n}/{retry_times}\")\r\n            n += 1\r\n    # \u91cd\u8bd5\u4e09\u6b21\u540e\u8fd8\u4e0d\u6210\u529f\u76f4\u63a5\u653e\u5f03\r\n    if last_event is not None:\r\n        last_event.done = True\r\n        ew.write_event(last_event)\r\n    if content_length < part_end:\r\n        helper.log_error(f\"Getting object {object_key} failed\")\r\n", "customized_options": [{"name": "endpoint", "value": ""}, {"name": "ak", "value": ""}, {"name": "bucket", "value": ""}, {"name": "prefix", "value": ""}, {"name": "part_size", "value": "4194304"}, {"name": "retry_times", "value": "3"}, {"name": "using_https", "value": true}, {"name": "unpack_gz_file", "value": true}, {"name": "enable_obs_log", "value": false}, {"name": "log_config_path", "value": ""}], "uuid": "79cadf1fc16a4d5bba814ac1b80f0222", "sample_count": 0}]}, "global_settings_builder": {"global_settings": {"proxy_settings": {"proxy_type": "http"}, "log_settings": {}}}, "sourcetype_builder": {"obs-input": {"metadata": {"event_count": 0, "data_input_name": "obs_input", "extractions_count": 0, "cims_count": 0}}}}